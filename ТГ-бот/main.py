import telebot
import requests
import json
import sqlite3
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
TOKEN = "7474544152:AAFYg5_s8Fyx1Y8HSonGiVwWcpao8yb20ks"

bot = telebot.TeleBot(TOKEN)
scheduler = BackgroundScheduler()
scheduler.start()

# –ü–æ–¥—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ SQL —Ç–∞–±–ª–∏—Ü–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–∞–Ω–Ω—ã–µ.
conn = sqlite3.connect('events.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER UNIQUE
                  )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS subscriptions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    event_id INTEGER,
                    FOREIGN KEY (user_id) REFERENCES users(user_id)
                  )''')

cursor.execute('''CREATE TABLE IF NOT EXISTS events (
                    event_id INTEGER PRIMARY KEY,
                    event_name TEXT,
                    start_time TEXT,
                    end_time TEXT
                  )''')

conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç üòé –Ø —á–∞—Ç-–±–æ—Ç –ù–ê–§–ò, —è –ø–æ–º–æ–≥–∞—é –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏—è—Ç–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.\n\n"
        "–£–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É —Å–¥–µ–ª–∞—Ç—å, —Ç—ã –º–æ–∂–µ—à—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /info."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /info
def info(update: Update, context: CallbackContext) -> None:
    update.message.reply_text(
        "–Ø —á–∞—Ç-–±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –ù–ê–§–ò, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å–ø–∏–∫–µ—Ä–æ–≤ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π. "
        "–ú–Ω–µ –º–æ–∂–Ω–æ –¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∫–∞–∫ \"–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –ù–ê–§–ò\", \"–û—Ç–∫—Ä—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è\", "
        "\"–£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏\" –∏ —Ç.–¥."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def text_message(update: Update, context: CallbackContext) -> None:
    text = update.message.text.lower()

    if '–æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –Ω–∞—Ñ–∏' in text:
        update.message.reply_text("–°–∞–π—Ç –ù–ê–§–ò: https://www.nafi.ru")
    elif '–æ—Ç–∫—Ä—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è' in text:
        update.message.reply_text("–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: https://www.nafi.ru/researches/")
    elif '—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏' in text:
        update.message.reply_text("\n–í–≤–µ–¥–∏—Ç–µ id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É id –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
        context.user_data['awaiting_event_id'] = True
    elif context.user_data.get('awaiting_event_id'):
        event_id = text
        context.user_data['awaiting_event_id'] = False
        handle_event_id(update, context, event_id)
    else:
        update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /info –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

def handle_event_id(update: Update, context: CallbackContext, event_id: str):
    cursor.execute("SELECT * FROM events WHERE event_id=?", (event_id,))
    event = cursor.fetchone()
    if event:
        event_info = f"–ò–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event[1]}\n–ù–∞—á–∞–ª–æ: {event[2]}\n–û–∫–æ–Ω—á–∞–Ω–∏–µ: {event[3]}"
        update.message.reply_text(event_info)
        cursor.execute("INSERT INTO subscriptions (user_id, event_id) VALUES (?, ?)", (update.message.from_user.id, event_id))
        conn.commit()
        update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è!")
    else:
        update.message.reply_text("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    cursor.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.from_user.id,))
    conn.commit()
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç!!! –Ø –±–æ—Ç –ù–ê–§–ò, –º–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - —É–≤–µ–¥–æ–º–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–±—ã—Ç–∏—è–º.")

def main() -> None:
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("info", info))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, text_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    updater.idle()

if __name__ == "__main__":
    main()